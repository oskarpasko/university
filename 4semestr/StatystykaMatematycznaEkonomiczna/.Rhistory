# to kwartalna sprzeda? produkt?w firmy z 5 lat.
# Stw?rz tak? macierz H, ?e H%*%sprzedaz to
# - wyniki rocznej sprzedazy
# - wyniki sprzedazy z ostatniego miesiace kwartalu
# macierz diagonalna i wektor jednostkowy
sprzedaz
H=
# ----- Komendy do RStudio -----
# ----- Podstawy -----
#wypisanie
print(zmienna)
#losowanie liczb w zakresie
x <- rnorm(100)
y <- rnorm(100)
#zaokraglanie liczb
round(3.123456789, digits = 3)
#zapytanie czy liczba wystepuje w danej zmiennej
2 %in% x
#dwuwymiarowy wykres
plot(x, y)
#histogram
hist(x)
# ---- Podstawowe struktury danych -----
# -----wektory
a <- c(4.7, 3.2, 1.5, 7.8)
x <- 1:9
y <- 1:3
z <- 1:8
#długość wektora, czyli liczbę zmiennych w wektorze
length(a)
p <- sample(1:100) #permutacja
#indeksowanie
a[3]
a[c(1, 2, 4)]
a[x]; a[y]; a[z]
#wektoryzacja
a <- c(3, 1, 5, 2)
b <- c(4, 3, 1, 7)
a+b; a-b; a*b; a/b; a^b
c <- c(4, 3, 1, 7, 2)
#funkcje matematyczne
sin(a) ; log(a) ; log10(a) ; sum(a) ; mean(a)
# ----- macierze
M <- matrix(sample(1:10, 9), ncol = 3)
apply(M, 1, sum)
apply(M, 2, sum)
#przydatne funkcje
rowSums(M)
colSums(M)
addmargins(M)
# ----- listy
L <- list(a = 1:2, b = 3:5, c = 6:9)
L; L[2] ; L[[2]]; L$b ; L[[2]][3]
#funkcje matematyczne na listach
lapply(L, mean) #lapply(<lista>, <funkcja matematyczna>)
mean(L[[2]])
#przekształcenie listy na wektor
unlist(L) #unlist(<lista>)
# ----- Ramki danych to tak na prawdę listy, ale też trochę macierze
df <- data.frame(no = c(1:4),
name = c("John", "Martha", "Ben", "Jeny"),
height = c(180, 172, 165, 197))
df ; df[2] ; df[[2]] ; df$name ; df[[2]][3] ; df[3,2]
# ----- Programowanie -----
#wypisanie
cat("Hello World!")
#pętla for
for(i in 1:10){
cat("Hello World!\n")
}
#równoważna pętla
for(i in 1:10) cat("Hello World!\n")
#Konkatenacja
for(i in 1:10) cat("To jest ", i," nr.\n")
# ----- Funkcje
wypisz <- function(word, x){
for(i in 1:x){
cat(i, ". ", word, "\n")
if(i >= 10){
cat("...")
break}
}
}
# ----- pętla while
a=126
b=132
while(a>0 & b>0)
{
print(c(a,b))
if(a>b){a=a-b}else{b=b-a}
}
outer(X = c(1,2),Y = c(3,4,5),FUN = "*")
c(1,2)%o%c(3,4,5)
kronecker(X = c(1,2),Y = matrix(c(3,4,5,6),2,2,byrow = TRUE),FUN = "+")
matrix(data=(0:4),nrow=5,ncol=5,byrow=T)
outer(0:4,0:4,"+")
####################################################################################
# Warunki, p?tle, w?asne funkcje
####################################################################################
#----P?TLE----
# Typy p?tli w R
# -for
# -while
# -repeat
#
#----og?lna forma p?tli 'for' ----
for (variable in vector) # zauwa?my, ?e zmienna przebiega wektor a nie tylko klasyczn? wersj? typu 1:10
{
# wyra?enie do wykonania
}
# klasyczna iteracja
a=seq.int(from = 3.5,by = 2.1,to = 40)
for (j in 1:10)
{
print(a[j]) #wy?wietl element j-ty wektora a
}
for (j in 1:10) # klasyczna iteracja, iterator jest cz?sci? cia?a p?tli i s?u?y do oblicze?
{
print(log(j^2)+j^2)
}
for (j in 1:10) # klasyczna iteracja, iterator s?u?y jedynie do liczenia powt?rze? p?tli
{
s=rnorm(50,0,1)
print(mean(s))
}
# p?tla po dowolnym wektorze
owoce = c('jab?ko','banan','gruszka')
for (x in owoce)
{
print(nchar(x)) # wy?wietla liczb? znak?w w danym s?owie
}
#----og?lna forma p?tli 'while' ----
while (condition) # okre?lamy warunek, kt?ry jest sprawdzany przed wykonaniem iteracji.
{
# wyra?enie do wykonania
}
# Brak z g?ry narzuconego limitu wykona? p?tli
x=2
while (x<10)
{
print(x^2)
x=x+1 #operacja wi??e si? z warunkiem zako?czenia p?tli
}
x=10
while (x<10)
{
print(x^2)
x=x+1 #operacja wi??e si? z warunkiem zako?czenia p?tli
}
#----og?lna forma p?tli 'repeat' ----
repeat(# wyra?enie do wykonania)
# nie ma wbudowanego ?adnego warunku limituj?cego liczb? iteracji
# konieczne jest stosowanie wyra?e? steruj?cych p?tlami
#----wyra?enia steruj?ce p?tlami----
next #przechodzimy do kolejnej iteracji
break # przerywamy dzia?anie p?tli
for (i in 1:10) {
if(i==4)
{
next
}
print(i)
}
for (i in 1:10) {
if(i==4)
{
break
}
print(i)
}
# p?tla a zapis wyniku
x=vector(mode = 'double',length = 10)  #tworzymy obiekt w kt?rym b?d? wyniki
for (j in 1:10) # klasyczna iteracja, iterator jest cz?sci? funkcji i s?u?y do oblicze?
{
x[j]=(log(j^2)+j^2)
}
#tworzymy obiekt bez okre?lania jego wielko?ci np. nie wiemy ile b?dzie wynik?w
x=c()
x=vector(mode = 'double')
for (j in 1:10) # klasyczna iteracja, iterator jest cz?sci? funkcji i s?u?y do oblicze?
{
x[j]=(log(j^2)+j^2)
}
# Uwaga! R wielokrotnie przepisuje obiekt.
# UWAGI
# -unikaj zagnie?d?onych p?tli
# -wybieraj wektoryzacj? zamiast p?tli o ile to mo?liwe
# -spr?buj funkcji z rodziny apply
# -stw?rz obiekt wynikowy przez rozpocz?ciem p?tli
# -nadpisywanie w p?tli jest bardzo nieefektywne
# ZADANIA
# napisz p?tle for, kt?ra liczy ?redni? warto?? ka?dej kolumny ze zbioru mtcars i zapisuje do wektora 'srednia'
# napisz p?tle for, kt?ra zwraca n pierwszyh element?w ci?gu geometrycznego o ilorazie r i pierwszym wyrazie a
# napisz p?tle for, kt?ra zwraca kolejne elementy ci?gu Fibonacciego.
# napisz p?tle for, kt?ra zwraca ilorazy kolejnych element?w ci?gu Fibonacciego.
# napisz p?tl? while, kt?ra realizuje algorytm Euklidesa (Najwi?kszy Wsp?lny Dzielnik) dla liczb a, b oraz wypisuje kroki algorytmu
a=126
b=132
while(a>0 & b>0)
{
print(c(a,b))
if(a>b){a=a-b}else{b=b-a}
}
while(b!=0)
{
print(c(a,b))
c=a%%b
a=b
b=c
}
#----W?ASNE FUNKCJE----
# jeden argument
kwadrat = function(x)
{
y=x^2
return(y) #funkcj? ko?czy komenda return, kt?ra zawiera wynik dzia?ania funkcji
}
kwadrat = function(x)
{
return(x^2)
}
kwadrat = function(x)
{
x^2 #je?eli nie podamy return, funkcja zwr?ci ostatni przetwarzany element
}
kwadrat(13)
kwadrat(c(13,40)) # funkcja zwr?ci wynik o ile cia?o funkcji pozwala dzia?a? na danym obiekcie
kwadrat(matrix(1:9,3,3)) # w tym przypadku x^2 jest wykonywalne na macierzach
# wiele argument?w
odlegloEukl = function(x,y)
{
odl=sqrt(sum((x-y)^2))
return(odl)
}
odlegloEukl(3,4) # domy?lnie parametry s? w tej samej kolejno?ci co w definicji funkcji
odlegloEukl(x = 3,y = 4) # sprecyowanie kt?re parametry podajemy
odlegloEukl(y = 3,x = 4) # kolejno?? mo?e by? inna ni? w definicji funkcji
odlegloEukl(c(3,4),c(5,9)) # je?eli funkcja obejmuje og?lniejsze obiekty, wynik zostanie zwr?cony
# wiele argument?w z warto?ci? domy?ln?
odlegloMink = function(x,y,p=2) # tutaj p przyjmuje warto?? domy?ln? 2
{
odl=(sum((abs(x-y))^p))^(1/p)
return(odl)
}
odlegloMink(x = 3,y = 4) # u?ywamy warto?ci domy?lnej
odlegloMink(x = 3,y = 4,p = 1) # u?ywamy w?asnej warto?ci
odlegloMink(c(3,4),c(5,9))
odlegloMink(c(3,4),c(5,9),p = 1)
# ZADANIA
# napisz funkcj? MAKS(df), kt?ra zwraca maksimum ka?dej kolumny z ramki danych df
# napisz funkcj? NWD(a,b), kt?ra zwraca Najwi?kszy Wsp?lny Dzielnik liczb a, b
# napisz funkcj? FIB(n), kt?ra zwraca n kolejnych element?w ci?gu Fibonacciego.
# napisz funkcj? GEOMSUM(n,a,r), kt?ra wylicza sum? n pierwszyh element?w ci?gu geometrycznego o ilorazie r i pierwszym wyrazie a
# napisz funkcj? ROOT(a,b,c), kt?ra znajduje pierwiastki tr?jmianu ax^2+b^x+c. Funkcja powinna zwr?ci? komunikat, ?e pierwiastki nie istniej?, gdy taka sytuacja zachodzi
# napisz funkcj? TRIANGLE(a,b,c), kt?ra wypisuje czy z bok?w podanej d?ugo?ci mo?na utworzy? tr?jk?t i jaki to tr?jk?t: r?wnoboczny, r?wnoramienny czy r??noboczny
FIB3=function(n)
{
x = numeric(n)
x[1:3] = 1
for(i in 4:n) x[i] = x[i-3] + x[i-2] + x[i-1]
return(x)
}
#----Rodzina funkcji apply----
# apply
# -stosowana do macierzy, co wymusza ten sam typ danych (ramki danych b?d? przekonwertowane na matrix)
# -dzia?a po wierszach albo po kolumnach obiektu wsadowego
apply(X, MARGIN, FUN, ...) # X to macierz lub og?lniejszy array
# MARGIN: 1 oznacza po wierszach za? 2 po kolumnach, c(1, 2) - ka?dy wiersz i kolumna
# FUN funkcja, kt?r? stosujemy do ka?dego wiersza, kolumny, elementu
# ... kolejne argumenty dla FUN wymieniane z nazwy np. na.rm=T
apply(iris[,-5],MARGIN = 2,FUN = mean) # dla ka?dej kolumny liczy ?redni?
apply(iris[,-5],MARGIN = 2,FUN = function(x) (mean(x^3)-mean(x)^3)/sd(x)^3) # dla ka?dej kolumny liczy wsp??czynnik asymetrii zdefiniowany w ramach apply
seq.int(from 1: to 1000, by 3)
seq.int(from 1, to 1000, by 3)
seq.int(from = 1, to = 1000, by = 3)
c(seq.int(from = 0, to = 10, by = 1))
for()
A[col(A)>=row(A)]=1
suma = 0
for(x in 1:10){
a = x:10
suma = suma + a
}
srednia = suma/10
suma = 0
for(x in 1:10){
suma = suma + x
}
srednia = suma / 10
print("Średnia wynosi: ", srednia)
cat srednia
print(srednia)
cat("Średnia wynosi: ", srednia)
srednia <- function(x, y){
suma = 0
for(x in 1:y){
suma = suma + x
}
srednia = suma / y
cat("Średnia = ", srednia)
}
srednia(1, 2)
srednia(1, 1)
srednia(1, 5)
mojaSrednia <- function(x, y){
suma = 0
for(x in 1:y){
suma = suma + x
}
srednia = suma / y
cat("Średnia = ", srednia)
}
mojaSrednia(1, 5)
mojaSrednia <- function(x, y){
suma = 0
for(z in x:y){
suma = suma + z
}
srednia = suma / y
cat("Średnia = ", srednia)
}
mojaSrednia(1, 5)
mojaSrednia(2, 5)
mojaSrednia <- function(x, y){
suma = 0
for(z in x:y){
print(z)
suma = suma + z
}
srednia = suma / y
cat("Średnia = ", srednia)
}
mojaSrednia(1, 5)
print(suma)
print(z)
mojaSrednia <- function(x, y){
suma = 0
srednia = 0
for(z in x:y){
print(z)
suma = suma + z
}
srednia = suma / y
cat("Średnia = ", srednia)
}
mojaSrednia(1, 5)
mojaSrednia <- function(x, y){
suma = 0
srednia = 0
for(z in x:y){
print(z)
suma = suma + z
}
print(suma)
print(y)
srednia = suma / y
cat("Średnia = ", srednia)
}
mojaSrednia(1, 5)
rep(1:10,1:10)
matrix(1:6,nrow=2,ncol=3,byrow=TRUE)
matrix(1:6,nrow=2,ncol=3,byrow=FALSE)
outer(X = c(1,2),Y = c(3,4,5),FUN = "+")
outer(X = c(1,2),Y = c(3,4,5),FUN = "*")
c(1,2)%o%c(3,4,5)
c(1,2,3,4)%o%c(4,5,6,7,8,9)
kronecker(X = c(1,2),Y = matrix(c(3,4,5,6),2,2,byrow = TRUE),FUN = "+")
sprzedaz=seq.int(from = 1050,by=50,to=2000)*c(0.8,1,0.9,1.2)
sprzedaz
P <- matrix(seq.int(from = 1050,by=50,to=2000)*c(0.8,1,0.9,1.2), nrows=4, ncol=5, byrow=FALSE)
P <- matrix(seq.int(from = 1050,by=50,to=2000)*c(0.8,1,0.9,1.2), nrow=4, ncol=5, byrow=FALSE)
P
sam(A)
sum(A)
sum(P)
addmargins(P)
A = matrix(0,3,3)
A
A = matrix(0,3,3)
B = matrix(1,3,2)
C = matrix (2,2,3)
A
B
C
rbind(A,C)
cbind(A,B)
P
max(P)
rep(seq.int(from=1, to+10, by=1), times=10)
rep(seq.int(from=1, to=10, by=1), times=10)
rep(seq.int(from=1, to=10, by=1), each=1:10)
rep(seq.int(from=1, to=10, by=1), each=10)
A = matrix(0,3,3)
B = matrix(1,3,2)
C = matrix (2,2,3)
A
B
C
rbind(A,C)
cbind(A,B)
diag(1:6) #macierz diagonalna
diag(5) #macierz jednostkowa
kronecker(X = c(1,2),Y = matrix(c(3,4,5,6),2,2,byrow = TRUE),FUN = "+")
matrix(1:6,nrow=2,ncol=3,byrow=FALSE)
A <- seq.int(from = 1050,by=50,to=2000)*c(0.8,1,0.9,1.2)
A
a=matrix(1:6,nrow=2,ncol=3,byrow=FALSE)
A
a
a
col(a)
row(a)
abs(a)
a
solve(a)
a = matric(1:9, nrow=3, ncol=3, byrow=TRUE)
a = matrix(1:9, nrow=3, ncol=3, byrow=TRUE)
a
solve(a)
t(a)
det(a)
dim(a)
eigen(a)
lista = list(1:3, 4:5, 6:10)
lista
lista[[2]][1]
lista[[3]][3]
lista[[1]]
unlist(lista)
lista
unlista = unlist(lista)
lista
unlista
df <- data.frame(no = c(1:4),
name = c("John", "Martha", "Ben", "Jeny"),
height = c(180, 172, 165, 197))
df
df = data.frame(c("Japonia", "Polska", "USA"), c("TAK", "NIE", "NIE"))
df
df = data.frame(kraj = c("Japonia", "Polska", "USA"), decyzja = c("TAK", "NIE", "NIE"))
df
emp_name= sample(x = c("Rick","Claude","Dan","Michelle","Ryan","Gary","Tom","Jerry"), size=50, replace = T)
emp_name
emp.data<-data.frame(emp_id,emp_name,salary,start_date,stringsAsFactors = FALSE)
str(a)
summary(a)
outer(X = c(1,2),Y = c(3,4,5),FUN = "+")
outer(X = c(2,3),Y = c(3,4,5),FUN = "+")
diag(5) #macierz jednostkowa
outer(X = c(2,3,4),Y = c(3,4,5),FUN = "+")
c(2,3,4)%o%c(3,4,5)
c(2,3,4)%+%c(3,4,5)
c(2,3,4)%o%c(3,4,5)
kronecker(X = c(1,2),Y = matrix(c(3,4,5,6),2,2,byrow = TRUE),FUN = "+")
kronecker(X = c(1,2, 3),Y = matrix(c(3,4,5,6),2,2,byrow = TRUE),FUN = "+")
kronecker(X = c(1),Y = matrix(c(3,4,5,6),2,2,byrow = TRUE),FUN = "+")
kronecker(X = c(1),Y = matrix(c(3,4,5,6),2,2,byrow = TRUE),FUN = "+")
kronecker(X = c(1,1),Y = matrix(c(3,4,5,6),2,2,byrow = TRUE),FUN = "+")
kronecker(X = c(1,10),Y = matrix(c(3,4,5,6),2,2,byrow = TRUE),FUN = "+")
kronecker(X = c(1),Y = matrix(3:6,2,2,byrow = TRUE),FUN = "+")
c(1,2) %x% matrix(c(3,4,5,6),2,2,byrow = TRUE)
c(2) %x% matrix(c(3,4,5,6),2,2,byrow = TRUE)
as.matrix(1:10)
addmargins(c(2) %x% matrix(c(3,4,5,6),2,2,byrow = TRUE))
lista=list(pi,1:5,c("a","b"),diag(4:7))
lista=list(pi,1:5,c("a","b"),diag(4:7))
lista
vector(mode="list",length = 3)
library(readxl)
install.packages("readxl")
install.packages("forecast")
install.packages("tseries")
install.packages("fBasics")
install.packages("TTR")
install.packages("timeSeries")
install.packages("lmtest")
library(readxl)
library(forcast)
library(readxl)
library(forecast)
library(tseries)
library(fBasics)
library(TTR)
library(timeSeries)
library(lmtest)
dane = read("Dane.xlsx")
dane <- read_excel("Dane.xlsx")
dane <- read_excel("Dane.xlsx")
library(readxl)
library(forecast)
library(tseries)
library(fBasics)
library(TTR)
library(timeSeries)
library(lmtest)
dane <- read_excel("Dane.xlsx")
dane <- read_excel("/Users/oskarpasko/Documents/GitHub/University/4semestr/StatystykaMatematycznaEkonomiczna/Dane.xlsx")
print(dane)
dane <- read_excel("/Dane.xlsx")
print(n=50, dane)
getwd()
dane <- read_excel("Dane.xlsx")
setwd("~/Documents/GitHub/University/4semestr/StatystykaMatematycznaEkonomiczna")
library(readxl)
library(forecast)
library(tseries)
library(fBasics)
library(TTR)
library(timeSeries)
library(lmtest)
dane <- read_excel("Dane.xlsx")
print(n=50, dane)
